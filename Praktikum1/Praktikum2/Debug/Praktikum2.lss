
Praktikum2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b5  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000522  00000000  00000000  0000071d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  000011d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	26 c0       	rjmp	.+76     	; 0x82 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define F_CPU 1000000UL
#include <util/delay.h>

int main(void)
{
	DDRB = 7;
  38:	87 e0       	ldi	r24, 0x07	; 7
  3a:	87 bb       	out	0x17, r24	; 23
	unsigned char value = 1;
	int toggle = 0;
  3c:	20 e0       	ldi	r18, 0x00	; 0
  3e:	30 e0       	ldi	r19, 0x00	; 0
#include <util/delay.h>

int main(void)
{
	DDRB = 7;
	unsigned char value = 1;
  40:	81 e0       	ldi	r24, 0x01	; 1
	while (1) 
	{
		PORTB = value;
		if (value >= 4 || (value == 1 && toggle == 1))
		{
			toggle = toggle == 0 ? 1: 0;
  42:	41 e0       	ldi	r20, 0x01	; 1
  44:	50 e0       	ldi	r21, 0x00	; 0
	DDRB = 7;
	unsigned char value = 1;
	int toggle = 0;
	while (1) 
	{
		PORTB = value;
  46:	88 bb       	out	0x18, r24	; 24
		if (value >= 4 || (value == 1 && toggle == 1))
  48:	84 30       	cpi	r24, 0x04	; 4
  4a:	28 f4       	brcc	.+10     	; 0x56 <__SREG__+0x17>
  4c:	81 30       	cpi	r24, 0x01	; 1
  4e:	49 f4       	brne	.+18     	; 0x62 <__SREG__+0x23>
  50:	21 30       	cpi	r18, 0x01	; 1
  52:	31 05       	cpc	r19, r1
  54:	31 f4       	brne	.+12     	; 0x62 <__SREG__+0x23>
		{
			toggle = toggle == 0 ? 1: 0;
  56:	94 2f       	mov	r25, r20
  58:	23 2b       	or	r18, r19
  5a:	09 f0       	breq	.+2      	; 0x5e <__SREG__+0x1f>
  5c:	95 2f       	mov	r25, r21
  5e:	29 2f       	mov	r18, r25
  60:	30 e0       	ldi	r19, 0x00	; 0
		}
		if (toggle == 0)
  62:	21 15       	cp	r18, r1
  64:	31 05       	cpc	r19, r1
  66:	11 f4       	brne	.+4      	; 0x6c <__SREG__+0x2d>
		{
			value = (value << 1);
  68:	88 0f       	add	r24, r24
  6a:	01 c0       	rjmp	.+2      	; 0x6e <__SREG__+0x2f>
		}
		else
		{
			value = (value >> 1);
  6c:	86 95       	lsr	r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	6f ef       	ldi	r22, 0xFF	; 255
  70:	70 e7       	ldi	r23, 0x70	; 112
  72:	92 e0       	ldi	r25, 0x02	; 2
  74:	61 50       	subi	r22, 0x01	; 1
  76:	70 40       	sbci	r23, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <__SREG__+0x35>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <__SREG__+0x3f>
  7e:	00 00       	nop
  80:	e2 cf       	rjmp	.-60     	; 0x46 <__SREG__+0x7>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
